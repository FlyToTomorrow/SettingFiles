
/*
  Copyright (C) 1999-2008 by Mark D. Hill and David A. Wood for the
  Wisconsin Multifacet Project.  Contact: gems@cs.wisc.edu
  http://www.cs.wisc.edu/gems/

  --------------------------------------------------------------------

  This file is part of the Ruby Multiprocessor Memory System Simulator, 
  a component of the Multifacet GEMS (General Execution-driven 
  Multiprocessor Simulator) software toolset originally developed at 
  the University of Wisconsin-Madison.

  Ruby was originally developed primarily by Milo Martin and Daniel
  Sorin with contributions from Ross Dickson, Carl Mauer, and Manoj
  Plakal.

  Substantial further development of Multifacet GEMS at the
  University of Wisconsin was performed by Alaa Alameldeen, Brad
  Beckmann, Jayaram Bobba, Ross Dickson, Dan Gibson, Pacia Harper,
  Derek Hower, Milo Martin, Michael Marty, Carl Mauer, Michelle Moravan,
  Kevin Moore, Andrew Phelps, Manoj Plakal, Daniel Sorin, Haris Volos, 
  Min Xu, and Luke Yen.
  --------------------------------------------------------------------

  If your use of this software contributes to a published paper, we
  request that you (1) cite our summary paper that appears on our
  website (http://www.cs.wisc.edu/gems/) and (2) e-mail a citation
  for your published paper to gems@cs.wisc.edu.

  If you redistribute derivatives of this software, we request that
  you notify us and either (1) ask people to register with us at our
  website (http://www.cs.wisc.edu/gems/) or (2) collect registration
  information and periodically send it to us.

  --------------------------------------------------------------------

  Multifacet GEMS is free software; you can redistribute it and/or
  modify it under the terms of version 2 of the GNU General Public
  License as published by the Free Software Foundation.

  Multifacet GEMS is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with the Multifacet GEMS; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
  02111-1307, USA

  The GNU General Public License is contained in the file LICENSE.

  ### END HEADER ###
*/

/*
 * $Id$
 *
 */

#include "protocol_name.h"
#include "test_framework.h"
#include "System.h"
#include "OpalInterface.h"
#include "init.h"
#include "Tester.h"
#include "EventQueue.h"
#include "getopt.h"
#include "Network.h"
#include "CacheRecorder.h"
#include "Tracer.h"
#include "Utilities.h"
//#include "CoreDelayModel_global.h"
#include "CoreSystem.h"
#include "w_net_Global.h"
using namespace std;
#include <string>
#include <map>
#include <time.h>
#include <stdio.h>
#include "environment.h"


extern "C" {
#include "simics/api_dummy.h"
};

#include "confio.h"
#include "initvar.h"

#include "default_param.h"
#include "tester_param.h"
#include "ActivityRecorder.h"

static void parseOptions(int argc, char **argv);
static void usageInstructions();
static void checkArg(char ch);
static void tester_record_cache();
static void tester_playback_trace();
static void tester_initialize(int argc, char **argv);
static void tester_destroy();

static string trace_filename;
char * my_default_param;
initvar_t * my_initvar;


string app_file;
string arc_file;
string map_file;
string pwr_file;//ZHE150331:power lib filename
string out_file;//ZHE150402
string instAddrTrace;
string dataAddrTrace;
int g_numberWorkload = 1;
bool useCachedDistMatrix = false;
bool abortAfterCreatingNetDist = false;

void tester_main(int argc, char **argv)
{
    tester_initialize(argc, argv);
    // unlock env, ready to start simulation.
    environment_unlock("jade.lock");

    if (trace_filename != "") {

	tester_playback_trace();
    } else {
    
	if (!(g_SYNTHETIC_DRIVER || g_DETERMINISTIC_DRIVER) && trace_filename == "") {
    
	    while(!g_system_ptr->getDriver()->get_end_simulation_flag())
	    {
    	 
		g_eventQueue_ptr->triggerEvents(g_eventQueue_ptr->getTime() + 100000*BASE_PERIOD);
        
	    }
      
	}
	cout<<"Cores stop running at time "<<g_eventQueue_ptr->getTime()<<"\n";
	//PENG_HACK: Middle simulation termination
        if(g_eventQueue_ptr->getTime()<g_RUNNING_CYCLE) 
	    g_eventQueue_ptr->triggerAllEvents();
        if(g_RUNNING_CYCLE==0)
            g_eventQueue_ptr->triggerAllEvents();
	cout<<"Whole system stop running at time "<<g_eventQueue_ptr->getTime()<<"\n";
	if (!(g_SYNTHETIC_DRIVER || g_DETERMINISTIC_DRIVER)) {
	    tester_record_cache();
	}
    }
    tester_destroy();
}

static void tester_allocate( void )
{
    init_simulator();
}

static void tester_generate_values( void )
{
}

void tester_initialize(int argc, char **argv)
{
    std::ifstream t;
    t.open("ruby/config/tester.runtime");
    if( t.is_open() == false ) {
	std::cout << "Could not open tester runtime file. Aborting." << std::endl;
	exit(1);
    }
    std::string runtimeTesterParameter;
    std::string line;
    while(t){
    	std::getline(t, line);
        // ... Append line to buffer and go on
    	runtimeTesterParameter.append(line);
    	runtimeTesterParameter.append("\n");
    }
    t.close();
    
    time_t init = time(NULL);
    std::cout << "JADE INIT BEGIN TIME (epoch): " << init << std::endl;
    
    int   param_len = strlen( global_default_param ) + strlen( global_default_tester_param ) + strlen( runtimeTesterParameter.c_str() ) + 1;
    char *default_param = (char *) malloc( sizeof(char) * param_len );
    my_default_param = default_param;
    strcpy( default_param, global_default_param );
    strcat( default_param, global_default_tester_param );
    strcat( default_param, runtimeTesterParameter.c_str() );
  
  
    initvar_t *ruby_initvar = new initvar_t( "ruby", "../../../ruby/",
					     default_param,
					     &tester_allocate,
					     &tester_generate_values,
					     NULL,
					     NULL );
    my_initvar = ruby_initvar;
    ruby_initvar->checkInitialization();
  
    cout<<"Before passing arguments g_NUM_PROCESSORS="<<g_NUM_PROCESSORS<<"\n";
  
  
    parseOptions(argc, argv);

  
 

    ruby_initvar->allocate();
    g_system_ptr->getDriver()->load_application( app_file,  arc_file, map_file, out_file, dataAddrTrace, instAddrTrace, g_numberWorkload);
    g_system_ptr->getDriver()->load_power_library(pwr_file);
    g_system_ptr->getActRecorder()->loadPowerLib(pwr_file);
  
    g_system_ptr->printConfig(cout);
    cout << "Testing clear stats...";
    g_system_ptr->clearStats();
    cout << "Done." << "\n";

    time_t endTime = time(NULL);
    std::cout << "JADE INIT END TIME (epoch): " << endTime << std::endl;
    std::cout << "Initialization elapsed time: " << endTime - init << std::endl;

}

void tester_destroy()
{
    ofstream app_result;
    app_result.open(out_file.c_str(),ios::app);
    g_system_ptr->printStats(app_result);
    app_result.close();
    g_debug_ptr->closeDebugOutputFile();

    free(my_default_param);
    delete my_initvar;
  
    destroy_simulator();
    cerr << "Success: " << CURRENT_PROTOCOL << "\n";
}


void tester_record_cache()
{
    cout << "Testing recording of cache contents" << "\n";
    CacheRecorder recorder;
    g_system_ptr->recordCacheContents(recorder);
    int written = 0;//recorder.dumpRecords("ruby.caches.gz");
    int read = 0;//Tracer::playbackTrace("ruby.caches.gz");
    assert(read == written);
    cout << "Testing recording of cache contents completed" << "\n";
}

void tester_playback_trace()
{
    assert(trace_filename != "");
    cout << "Reading trace from file '" << trace_filename << "'..." << "\n";
    int read = Tracer::playbackTrace(trace_filename);
    cout << "(" << read << " requests read)" << "\n";
    if (read == 0) {
	ERROR_MSG("Zero items read from tracefile.");
    }
}

// ************************************************************************
// *** Functions for parsing the command line parameters for the tester ***
// ************************************************************************

static struct option const long_options[] =
{
    {"help", no_argument, NULL, 'h'},
    {"processors", required_argument, NULL, 'p'},//MUST
    {"length", required_argument, NULL, 'l'},
    {"random", required_argument, NULL, 'r'},
    {"trace_input", required_argument, NULL, 'z'},
    {"component", required_argument, NULL, 'c'},
    {"verbosity", required_argument, NULL, 'v'},
    {"debug_output_file", required_argument, NULL, 'o'},
    {"start", required_argument, NULL, 's'},
    {"bandwidth", required_argument, NULL, 'b'},
    {"threshold", required_argument, NULL, 't'},
    {"think_time", required_argument, NULL, 'k'},
    {"locks", required_argument, NULL, 'q'},
    {"network", required_argument, NULL, 'n'},//MUST FILE_SPECIFIED
    {"procs_per_chip", required_argument, NULL, 'a'},//MUST
    {"l2_caches", required_argument, NULL, 'e'},//MUST
    {"memories", required_argument, NULL, 'm'},//MUST
    {"Iterations", required_argument, NULL, 'N'},
  
  
    {"ApplicationFile", required_argument, NULL, 'i'},
    {"ArchitectureFile", required_argument, NULL, 'd'},
    {"Number of workloads", required_argument, NULL, 'f'},
    {"MappingFile", required_argument, NULL, 'g'},
    {"TopologyFile",required_argument, NULL,'w'},
    {"Data Address Trace",required_argument, NULL,'D'},
    {"Instruction Address Trace",required_argument, NULL,'I'},
    {"Technology Node (nm)",required_argument, NULL,'A'},
    
    //Peng: add for inter-chip case use
    {"Injection Rate", required_argument, NULL, 'R'},
    {"Dynamic MTU", required_argument, NULL, 'T'},
    {"Inter-chip interconnect bw multiplier", required_argument, NULL, 'B'},
    {"Electrical inter-chip network", required_argument, NULL, 'E'},
    {"Processor performance ratio", required_argument, NULL, 'F'},
    {"Integrated NIC", required_argument, NULL, 'M'},
    {"End of command", no_argument, NULL, 'x'},
    {"Use cached distance matrix (topology)", no_argument, NULL, 'y'},
    {"No simulation. Just create cached distance matrix (topology)", no_argument, NULL, 'Y'},
    
    {"PowerLibFile", required_argument, NULL,'L'}, //ZHE add for power library reading
    {"OutputFile", required_argument, NULL,'O'},
    
    {NULL, 0, NULL, 0}
};

static void parseOptions(int argc, char **argv)
{
 
    cout << "Parsing command line arguments:" << "\n";


    // construct the short arguments string
    int counter = 0;
    string short_options;
    while (long_options[counter].name != NULL) {
	short_options += char(long_options[counter].val);
	if (long_options[counter].has_arg == required_argument) {
	    short_options += char(':');
	}
	counter++;
    }

    //
    std::cout << "Executing JADE with the following command line:\n";
    for(int i =0;i<argc;i++) {
	std::cout << argv[i] << " ";
    }
    std::cout << "\n";

    char c;
  
    char* tapp_file;
    char* tarc_file;
    char* tmap_file;
    char* tpwr_file = DEFAULT_PWR_LIB_FILE;//ZHE150331: add to store power lib file name
    char* output_file = DEFAULT_OUT_LOG_FILE;
    char *instructionAddressTrace = NULL;
    char *dataAddressTrace = NULL;

    // Default commands
    g_NETWORK_TOPOLOGY = strdup("FILE_SPECIFIED");
    
    /* Parse command line options.  */
    bool error;
    while ((c = getopt_long (argc, argv, short_options.c_str(), long_options, (int *) 0)) != EOF) {
	switch (c) {
	case 0:
	    break;
    
    
        case 'i':
            checkArg(c);
            tapp_file=strdup(optarg);
            
            break;
        case 'd':
            checkArg(c);
            tarc_file=strdup(optarg);
            
            break;
        case 'T':
            checkArg(c);
            g_D_MTU = atoi(optarg);
            
            break;
        case 'F':
            checkArg(c);
            g_PF = atoi(optarg);
            
            break;
        case 'B':
            checkArg(c);
            g_ODB = atof(optarg);
            
            break;
        case 'R':
            checkArg(c);
            InjectRate = atof(optarg);//If this parameter exists, synthetic traffic pattern used.
            SyntheticTraffic=true;
            L0_CACHE_ASSOC=4;//Re-assign the values to minimize the resources needed for simulation.
            L0_CACHE_NUM_SETS_BITS=4;
            L1_CACHE_ASSOC=4;
            L1_CACHE_NUM_SETS_BITS=4;
            L2_CACHE_ASSOC=4;
            L2_CACHE_NUM_SETS_BITS=6;
            g_MEMORY_SIZE_BYTES=134217728;
            
            break;                
        case 'E':
            checkArg(c);
            g_JADE_E_NETWORK = atoi(optarg);
            
            break;
        case 'M':
            checkArg(c);
            g_INIC = atoi(optarg);
            
            break;
        case 'f':
            checkArg(c);
	    g_numberWorkload = atoi(optarg);
            
            break;
        case 'g':
            checkArg(c);
            tmap_file=strdup(optarg);
            break;
	    //ZHE150331:add for power lib reading
        case 'L':
            checkArg(c);
            tpwr_file=strdup(optarg);
            break;
            
        case 'O':
            checkArg(c);
            output_file=strdup(optarg);
            break;
	    /////////////////////////////////////////
	case 'I':
            checkArg(c);
            instructionAddressTrace=strdup(optarg);
	    break;

	case 'D':
            checkArg(c);
            dataAddressTrace=strdup(optarg);
	    break;
            
	case 'w':
            checkArg(c);
            
            g_topology_file=strdup(optarg);
	    break;
	    /////////////////////     
	case 'c': 
	    checkArg(c);
	    cout << "  component filter string = " << optarg << "\n";
	    error = Debug::checkFilterString( optarg );
	    if (error) {
		usageInstructions();
	    }
	    DEBUG_FILTER_STRING = strdup( optarg );
	    break;

	case 'h':
	    usageInstructions();
	    break;

	case 'v':
	    checkArg(c);
	    cout << "  verbosity string = " << optarg << "\n";
	    error = Debug::checkVerbosityString(optarg);
	    if (error) {
		usageInstructions();
	    }
	    DEBUG_VERBOSITY_STRING = strdup( optarg );
	    break;

	case 'r': {
	    checkArg(c);
	    if (string(optarg) == "random") {
		g_RANDOM_SEED = time(NULL);
	    } else {
		g_RANDOM_SEED = atoi(optarg);
		if (g_RANDOM_SEED == 0) {
		    usageInstructions();
		}
	    }
	    break;
	}

	case 'l': {
	    checkArg(c);
	    g_tester_length = atoi(optarg);
	    cout << "  length of run = " << g_tester_length << "\n";
	    if (g_tester_length == 0) {
		usageInstructions();
	    }
	    break;
	}

	case 'q': {
	    checkArg(c);
	    g_synthetic_locks = atoi(optarg);
	    cout << "  locks in synthetic workload = " << g_synthetic_locks << "\n";
	    if (g_synthetic_locks == 0) {
		usageInstructions();
	    }
	    break;
	}

	case 'p': {
	    checkArg(c);
	    g_NUM_PROCESSORS = atoi(optarg);
	    break;
	}
	    
	case 'A': {
	    checkArg(c);
	    Tester::setTechnologyNode(atoi(optarg));
	    cout << "  Technology Node: " << Tester::getTechnologyNode() << "nm\n";
	    break;
	}

	case 'a': {
	    checkArg(c);
	    g_PROCS_PER_CHIP = atoi(optarg);
	    cout << "  g_PROCS_PER_CHIP: " << g_PROCS_PER_CHIP << "\n";
	    break;
	}

	case 'e': {
	    checkArg(c);
	    g_NUM_L2_BANKS = atoi(optarg);
	    cout << "  g_NUM_L2_BANKS: " << g_NUM_L2_BANKS << "\n";
	    break;
	}

	case 'm': {
	    checkArg(c);
	    g_NUM_MEMORIES = atoi(optarg);
	    cout << "  g_NUM_MEMORIES: " << g_NUM_MEMORIES << "\n";
	    break;
	}

	case 's': {
	    checkArg(c); 
	    long long start_time = atoll(optarg);
	    cout << "  debug start cycle = " << start_time << "\n";
	    if (start_time == 0) {
		usageInstructions();
	    }
	    DEBUG_START_TIME = start_time;
	    break;
	}
	    
	case 'N': {
	    checkArg(c);
	    
	    
	    unsigned int  numberIterations = atoi(optarg);
	    cout << "  Number iterations = " << numberIterations << "\n";
	    DelayCoreModel::execution_iterations = numberIterations;
	    DelayCoreModel::start_record_iteration = 1;
	    DelayCoreModel::end_record_iteration = numberIterations;
	    // if (start_time == 0) {
	    // 	usageInstructions();
	    // }
	    // DEBUG_START_TIME = start_time;
	    break;
	}

	case 'b': {
	    checkArg(c);
	    int bandwidth = atoi(optarg);
	    cout << "  bandwidth per link (MB/sec) = " << bandwidth << "\n";
	    g_endpoint_bandwidth = bandwidth;
	    if (bandwidth == 0) {
		usageInstructions();
	    }
	    break;
	}

	case 't': {
	    checkArg(c);
	    g_bash_bandwidth_adaptive_threshold = atof(optarg);
	    if ((g_bash_bandwidth_adaptive_threshold > 1.1) || (g_bash_bandwidth_adaptive_threshold < -0.1)) {
		cerr << "Error: Bandwidth adaptive threshold must be between 0.0 and 1.0" << "\n";
		usageInstructions();
	    }
      
	    break;
	}

	case 'k': {
	    checkArg(c);
	    g_think_time = atoi(optarg);
	    break;
	}

	case 'o':
	    checkArg(c);
	    cout << "  output file = " << optarg << "\n";
	    DEBUG_OUTPUT_FILENAME = strdup( optarg );
	    break;

	case 'z': 
	    checkArg(c);
	    trace_filename = string(optarg);
	    cout << "  tracefile = " << trace_filename << "\n";
	    break;

	case 'y':
	    std::cout << "Will use cached distance matrix if found\n";
	    useCachedDistMatrix=true;
	    break;

	case 'Y':
	    std::cout << "Will not simulate! It will only create network and abort!!!!\n";
	    std::cout << "Will not simulate! It will only create network and abort!!!!\n";
	    std::cout << "Will not simulate! It will only create network and abort!!!!\n";
	    std::cout << "Will not simulate! It will only create network and abort!!!!\n";
	    std::cout << "Will not simulate! It will only create network and abort!!!!\n";
	    std::cout << "Will not simulate! It will only create network and abort!!!!\n";
	    std::cout << "Will not simulate! It will only create network and abort!!!!\n";
	    std::cout << "Will not simulate! It will only create network and abort!!!!\n";
	    std::cout << "Will not simulate! It will only create network and abort!!!!\n";
	    std::cout << "Will not simulate! It will only create network and abort!!!!\n";
	    abortAfterCreatingNetDist=true;
	    break;

	case 'n':
	    checkArg(c);
	    cout << "  topology = " << string(optarg) << "\n";
	    g_NETWORK_TOPOLOGY = strdup(optarg);
	    break;

//	case 'F':
//	    checkArg(c);
//	    cout << "  Enable DVFS = " << string(optarg) << "\n";
//	    ENABLE_DVFS = strdup(optarg);
//	    break;            
//      

	default:
	    cerr << "parameter '" << c << "' unknown" << "\n";
	    usageInstructions();
	}
    }
  
    string st_app(tapp_file);
    string st_arc(tarc_file);
    string st_map(tmap_file);
    string st_pwr(tpwr_file);//ZHE150331:
    string st_out(output_file);//ZHE150402
    string st_iat(instructionAddressTrace != NULL  ? instructionAddressTrace : "");
    string st_dat(dataAddressTrace != NULL  ? dataAddressTrace : "");
    utilitiesSetRandomSeed(g_RANDOM_SEED);

  
    app_file=st_app;
    arc_file=st_arc;
    map_file=st_map;
    pwr_file=st_pwr;//ZHE150331:
    out_file=st_out;
    instAddrTrace=st_iat;
    dataAddrTrace=st_dat;
    
      
    assert(!app_file.empty());
    assert(!arc_file.empty());
    assert(!map_file.empty());
    assert(!pwr_file.empty());//ZHE150331:

}

static void usageInstructions()
{
    cerr << "\n";
    cerr << "Options:" << "\n";

    // print options
    int counter = 0;
    while (long_options[counter].name != NULL) {
	cerr << "  -" << char(long_options[counter].val);
	if (long_options[counter].has_arg == required_argument) {
	    cerr << " <arg>";
	}
	cerr << "  --" << long_options[counter].name;
	if (long_options[counter].has_arg == required_argument) {
	    cerr << " <arg>";
	}
	cerr << "\n";
	counter++;
    }

    cerr << "Option --processors (-p) is required." << "\n";
    cerr << "Either option --length (-l) or --trace_input (-z) must be specified." << "\n";
    cerr << "\n";
    g_debug_ptr->usageInstructions();
    cerr << "\n";

    exit(1);
}

static void checkArg(char ch)
{
    if (optarg == NULL) {
	cerr << "Error: parameter '" << ch << "' missing required argument" << "\n";
	usageInstructions();
    }
}
